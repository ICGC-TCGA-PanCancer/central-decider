#!/usr/bin/env perl

use strict;
use warnings;

use feature qw(say);

use DBI;
use DBD::SQLite;

use CGI;
use JSON;

use IPC::System::Simple;
use autodie qw(:all);
use Carp::Always;

use Config::Simple;

use GlobalGNOS::Search;
use Workflow::VCF;
use Workflow::BAM;

use Fcntl qw(:flock);

use Data::Dumper;

my $elasticsearch_url = 'http://pancancer.info/elasticsearch/pcawg_es/';

print CGI->header("text/javascript");

my $q = CGI->new;

my $workflow_name = $q->param('workflow-name');
my @donors = $q->param('donor');
my $number_of_donors = $q->param('number-of-donors');
my $gnos_repo = $q->param('gnos-repo');
my $test = $q->param('test');
my $force = $q->param('force');
my $cloud_env = $q->param('cloud-env');

unless (defined($workflow_name) and (@donors || $number_of_donors || $cloud_env) and defined($gnos_repo)) {
    say "Parameters incorrect.\n
         USAGE:\n
         workflow-name: As would appear to seqware and in the metadata\n
         donor: Specifying a donor name\n
         number_of_donors: To be used if you are not using whitelists. Specifies number of donors worth of results
         gnos-repo: The repos you intend on pulling the aligned BAMs from\n
         test: If specified the the database will not record the sample that has been scheduled 
         force: To be used when you want it to return INI files for workflows that have already been run
         \n 
         EXAMPLE:\n
         http://localhost/cgi-bin/central-decider/get-ini?workflow-name=SangerPancancerCgpCnIndelSnvStr&donor=BOCA-UK::CGP_donor_1635843&donor=BOCA-UK::CGP_donor_1635844&gnos-repo=https://gtrepo-ebi.annailabs.com/";
    exit;
}

my $cfg = new Config::Simple('workflow_map.cfg');
my $config = $cfg->vars();

my @config_workflows = grep {$config->{$_} ne '0'} keys %{$config};
my %candidate_workflows = map {(split /\./, $_)[1]  => (split /\./, $_)[0]  } @config_workflows;

my $workflow_type = $candidate_workflows{$workflow_name};
unless ( $workflow_type) {
    say 'Please check workflow-name';
    exit;
}

my $workflow_name_abbreviation = $config->{"$workflow_type.$workflow_name"};

#Using lock file so that we don't have problems with concurrancy
open(my $lock, '<', 'running.lock'); 
flock($lock, LOCK_EX);

my $dbh = DBI->connect('dbi:SQLite:dbname=running.db', '', '', {
  AutoCommit => 0,
  RaiseError => 0,
}) or die $DBI::errstr;

my $blacklist = read_blacklist($workflow_type, $workflow_name_abbreviation);

my $already_scheduled = get_scheduled_donors($dbh, $workflow_name) if ($number_of_donors);

if (!$test) {
    $blacklist = (defined $blacklist) ? unique( $blacklist, $already_scheduled) : $already_scheduled;
}
else {
    $blacklist = {};
}

my $pcawg_whitelist_dir = "/home/ubuntu/git/pcawg-operations";

my ( $GS, $donors, $schedule_donors);
if ( $workflow_type eq 'vcf') {
    my $donor_whitelist;
    unless (@donors || $number_of_donors) {
        $donor_whitelist = get_whitelist($workflow_name, $gnos_repo, $cloud_env );
    }
    else {
        $donor_whitelist = \@donors;
    }
    $GS = GlobalGNOS::Search->new( $elasticsearch_url, $workflow_name, $gnos_repo);
    $donors = $GS->get_donors( $donor_whitelist, $blacklist, $force, $number_of_donors );

    my $workflow = Workflow::VCF->new($workflow_name);
    $schedule_donors = $workflow->generate_run_parameters($donors);
} 
elsif ($workflow_type eq 'bam') {
    $GS = GlobalGNOS::Search->new( $elasticsearch_url, $workflow_name);
    $donors = $GS->get_donors( \@donors, $blacklist, $force, $number_of_donors);

    my $workflow = Workflow::BAM->new($workflow_name);
    $schedule_donors = $workflow->generate_run_parameters($donors);
}

add_donors_scheduled($dbh, $schedule_donors, $workflow_name, $gnos_repo) unless (defined $test);

print to_json( $schedule_donors, { ascii => 2, pretty => 1 } );

$dbh->disconnect();

flock $lock, LOCK_UN;
close $lock;

exit;

sub get_whitelist {
    my ($workflow_name, $gnos_repo, $cloud_env) = @_;

    my $workflow_whitelist_dir;
    my $variant_calling_whitelist_dir = "$pcawg_whitelist_dir/variant_calling";
    if ($workflow_name eq "SangerPancancerCgpCnIndelSnvStr") { 
        $workflow_whitelist_dir = "$variant_calling_whitelist_dir/sanger_workflow/whitelists";
    } 
    else {
        $workflow_whitelist_dir = "$variant_calling_whitelist_dir/dkfz_embl_workflow/whitelists";
    }
    my $cloud_env_whitelist_dir = "$workflow_whitelist_dir/$cloud_env";
    unless (-d $cloud_env_whitelist_dir) {
        say "Cannot find whitelist path: $cloud_env_whitelist_dir";
        exit;
    }

    my $gnos_name;
    if ($gnos_repo =~ m/https:\/\/gtrepo-(.*)\.annailabs\.com\/$/) {
        $gnos_name = $1;
    }

    unless($gnos_name) {
        say "Cannot determin gnos name from $gnos_repo";
        exit;
    }

    opendir(my $dh, $cloud_env_whitelist_dir);
    my @file_list = grep { !/^\./ && -f "$cloud_env_whitelist_dir/$_" } readdir($dh); 
    closedir $dh;

    unless (@file_list) {
        say "Could not find whitelist for $cloud_env_whitelist_dir";
        exit;
    }

    my @donors;
    foreach my $file_name (@file_list) {
         my @file_name_parts = split /\./, $file_name;

         next if (scalar @file_name_parts != 4);

         my ($file_cloud_env, $file_date, $file_descriptor, $file_extension) = @file_name_parts;
         next if $file_extension ne 'txt';
         next if $file_cloud_env ne $cloud_env;
         next unless $file_descriptor =~ /from_$gnos_name$/;
 
         my $file_path = "$cloud_env_whitelist_dir/$file_name";
         add_whitelist(\@donors, $file_path);   
    }
    @donors = unique(@donors);

    return \@donors;
}

sub add_whitelist {
    my ($donors, $file_path) = @_;
   
    open my $fh, '<', $file_path;
 
    while (my $row = <$fh>) {
        my ($project, $donor_id) = split ' ', $row;
        #Remove trailing and leading whitespace
        $project =~ s/^\s+|\s+$//g;
        $donor_id =~ s/^\s+|\s+$//g;
        push $donors, "$project\:\:$donor_id";
    }

    close $fh;
}

sub read_blacklist {
    my ($workflow_type, $worklow_name_abbreviation) = @_;

    my $file_path = "blacklist/$workflow_name_abbreviation-$workflow_type";

    return undef unless (-r $file_path);

    open my $fh, '<', $file_path;

    my %blacklist;
    while (my $row = <$fh>) {
        my ($project, $donor_id) = split ' ', $row;

        #Remove trailing and leading whitespace
        $project =~ s/^\s+|\s+$//g;
        $donor_id =~ s/^\s+|\s+$//g;

        $blacklist->{"$project\:\:$donor_id"} = 1;
    }

    close $fh;

    return [keys %blacklist];
}

sub get_scheduled_donors {
    my ($dbh, $workflow_name) = @_;
  
    my $query = "SELECT project, donor_id FROM vcf_scheduled WHERE workflow_name = \'$workflow_name\' AND dt >  date('NOW') - 30";
    my $rows = $dbh->selectall_arrayref($query);
   
    my %donors;
    foreach my $row (@{$rows}) {  
        $donors{"$row->[0]::$row->[1]"} = 1;
    }

    return \%donors;
}

sub add_donors_scheduled {
    my ($dbh, $schedule_donors, $workflow_name, $gnos_repo) = @_;

    my $sth = $dbh->prepare("INSERT INTO vcf_scheduled (workflow_name, project, donor_id, gnos_repo, analysis_center) VALUES (?, ?, ?, ?, ?)");

    my ($project_code, $donor_id);
    foreach my $donor (@$schedule_donors) {
        $sth->execute( $workflow_name, 
                          $donor->{project_code},
                          $donor->{donor_id},
                          $gnos_repo );
    }

    return $dbh->commit();
}

sub unique {
    my %seen;
    grep { !$seen{$_}++ } @_;
}
