#!/usr/bin/env perl

use strict;
use warnings;

use feature qw(say);

use DBD::SQLite;

use CGI;
use JSON;

use IPC::System::Simple;
use autodie qw(:all);
use Carp::Always;

use GlobalGNOS::Search;
use Workflow::VCF;

use Fcntl qw(:flock);

use Data::Dumper;

my $elasticsearch_url = 'http://pancancer.info/elasticsearch/';

print CGI->header("text/javascript");

my $q = CGI->new;

my $workflow_name = $q->param('workflow-name');
my @donors = $q->param('donor');
my $gnos_repo = $q->param('gnos-repo');

unless (defined($workflow_name) and @donors and defined($gnos_repo)) {
    say "Parameters incorrect.\n
         USAGE:\n
         workflow-name: as would appear to seqware and in the metadata\n
         donor: can either be a number for the number of results or a list of donors\n
         gnos-repo: the repos you intend on pulling the aligned BAMs from\n
         \n 
         EXAMPLE:\n
         http://localhost/cgi-bin/schedule/donor-vcf?workflow-name=SangerPancancerCgpCnIndelSnvStr&donor=BOCA-UK::CGP_donor_1635843&donor=BOCA-UK::CGP_donor_1635844&gnos-repo=https://gtrepo-ebi.annailabs.com/";
    exit;
}
#Using lock file so that we don't have problems with concurrancy
open(my $lock, '<', 'running.lock'); 
flock($lock, LOCK_EX);


my $dbh = DBI->connect('dbi:SQLite:dbname=running.db', '', '', {
  AutoCommit => 0,
  RaiseError => 0,
}) or die $DBI::errstr;


my $already_scheduled = get_donors_already_scheduled($dbh, $workflow_name);
my $blacklist = create_blacklist($already_scheduled);

my $GS = GlobalGNOS::Search->new( $elasticsearch_url, $workflow_name, $gnos_repo );

my $aligned_sets = $GS->get_aligned_sets( \@donors, $blacklist );

my $workflow = Workflow::VCF->new($workflow_name);

my $schedule_donors = $workflow->generate_run_parameters($aligned_sets);

add_donors_as_scheduled($dbh, $schedule_donors, $workflow_name, $gnos_repo);

print to_json( $schedule_donors, { ascii => 1, pretty => 1 } );

$dbh->disconnect();

flock $lock, LOCK_UN;
close $lock;

exit;

sub create_blacklist {
    my ($already_scheduled) = @_;

    open my $fh, '<', 'blacklist.txt';

    while (my $row = <$fh>) {
        my ($project, $donor_id) = split ' ', $row;
        #Remove trailing and leading whitespace
        $project =~ s/^\s+|\s+$//g;
        $donor_id =~ s/^\s+|\s+$//g;
        $already_scheduled->{"$project\:\:$donor_id"} = 1;
    }

    close $fh;

    return [keys %{$already_scheduled}];
}

sub get_donors_already_scheduled {
   my ($dbh, $workflow_name) = @_;
  
   my $query = "SELECT project, donor_id FROM scheduled WHERE workflow_name = \'$workflow_name\' AND dt > GETDATE() - 30";
   my $rows = $dbh->selectall_arrayref($query);
   
   my %donors;
   foreach my $row (@{$rows}) {  
      $donors{"$row->[0]::$row->[1]"} = 1;
   }

   return \%donors;
}

sub add_donors_as_scheduled {
    my ($dbh, $schedule_donors, $workflow_name, $gnos_repo) = @_;

    my $sth = $dbh->prepare("INSERT INTO scheduled (workflow_name, project, donor_id, gnos_repo) VALUES (?, ?, ?, ?)");

    my ($project_code, $donor_id);
    foreach my $donor (@$schedule_donors) {
        $sth->execute( $workflow_name, 
                          $donor->{project_code},
                          $donor->{donor_id},
                          $gnos_repo );
    }

    return $dbh->commit();
}
